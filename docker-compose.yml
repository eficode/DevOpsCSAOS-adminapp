version: '3'

services:
  adminapp:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    env_file:
      - .env
    environment:
      DATABASE_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      - ./src:/usr/src/app/src
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:bullseye
    restart: always
    container_name: postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
    ports:
      - 5432:5432

  populate:
    image: postgres:bullseye
    container_name: populate
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./schema.sql:/create_tables.sql
      - ./reset-db-sequences.sh:/reset-db-sequences.sh
      - ./reset.sql:/reset.sql
    env_file:
      - .env
    environment:
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
    command: >
      bash -c "psql -v ADMIN_EMAIL_1=\"$ADMIN_EMAIL_1\" -v ADMIN_EMAIL_2=\"$ADMIN_EMAIL_2\" -h db -d $POSTGRES_DB -a -f create_tables.sql &&
      ./reset-db-sequences.sh postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB"

volumes:
  postgres_data:
